<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alternet.FormDesigner.v8</name>
    </assembly>
    <members>
        <member name="T:Alternet.FormDesigner.WinForms.OutlineContextMenu">
            <summary>
            Implements a outline context menu.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineContextMenu.#ctor(Alternet.FormDesigner.WinForms.OutlineControl)">
            <summary>
            Initializes a new instance of the <c>OutlineContextMenu</c> class and associates it with the specified container.
            </summary>
            <param name="outlineControl">A <c>IOutlineControl</c> that is the container of this menu.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineContextMenu.ShowContextMenu(System.Drawing.Point)">
            <summary>
            Shows the context menu at the specified location.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.OutlineControl">
            <summary>
            Represents the outline control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.#ctor">
            <summary>
            Initializes a new instance of the <c>OutlineControl</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.OutlineControl.Painter">
            <summary>
            Provides an interface to draw outline control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.OutlineControl.FormDesignerControl">
            <summary>
            Gets or sets an <c>IFormDesignerControl</c> related to this outline control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.OutlineControl.Toolbox">
            <summary>
            Gets or sets toolbox control associated with the outline control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.OutlineControl.TreeView">
            <summary>
            Gets TreeView used to display outline items.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.OutlineControl.TypeNameDisplayStyle">
            <summary>
            Gets or sets an appearance of the item's type name in the outline control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.ShowRenameSelectedNodeUI">
            <summary>
            Starts the editing of the outline item name.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.CanMoveDown">
            <summary>
            Indicates whether current item can be moved down in the container.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.CanMoveUp">
            <summary>
            Indicates whether current item can be moved up in the container.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.CanMoveIn">
            <summary>
            Indicates whether current item can be moved into the next container.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.CanMoveOut">
            <summary>
            Indicates whether current item can be moved out of current container.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.MoveDown">
            <summary>
            Moves outline item down in the container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.MoveUp">
            <summary>
            Moves outline item up in the container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.MoveIn">
            <summary>
            Moves outline item into the next container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.OutlineControl.MoveOut">
            <summary>
            Moves outline item out of current container.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.PropertyGrid.PropertyTabBitmapProvider">
            <summary>
            Need to duplicate base PropertyTab.Bitmap functionality because GetType() is used there instead of the actual type.
            So the bitmaps cannot be loaded when 'this' is of a derived type.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.AddOrRenameForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.AddOrRenameForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.AddOrRenameForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryHeaderPaintData">
            <summary>
            Provides data to paint toolbox category header.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryHeaderPaintData.CategoryName">
            <summary>
            Gets or sets name of the category.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryHeaderPaintData.IsCollapsed">
            <summary>
            Gets or sets collapsed state of the category.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData">
            <summary>
            Provides base data to paint toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData.State">
            <summary>
            Gets or sets state of the toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData.IsSelected">
            <summary>
            Gets or sets a boolean value indicating whether toolbox item is selected.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData.Bounds">
            <summary>
            Gets or sets a size and location of the toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData.Graphics">
            <summary>
            Gets or sets the graphics used to paint toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxPaintBaseData.Font">
            <summary>
            Gets or sets the font of the text displayed by the toolbox item.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintState">
            <summary>
            Defines state of the painted toolbox item.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintState.Normal">
            <summary>
            Specifies normal state.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintState.Hovered">
            <summary>
            Specifies hovered state.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintState.Pressed">
            <summary>
            Specifies pressed state.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintState.Disabled">
            <summary>
            Specifies disabled state.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData">
            <summary>
            Provides data to paint toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData.CategoryName">
            <summary>
            Gets or sets name of the category contains toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData.Item">
            <summary>
            Gets or sets a <c>ToolboxItem</c> to paint.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData.Image">
            <summary>
            Gets or sets an image to paint within toolbox item.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter">
            <summary>
            Provides an interface to draw toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter.BackgroundColor">
            <summary>
            When implemented by a class, gets the background color of the toolbox categories and items.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter.PaintCategoryHeader(Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryHeaderPaintData)">
            <summary>
            When implemented by a class, draws specific category header.
            </summary>
            <param name="data">Specifies header's data to paint.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter.PaintToolboxItem(Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData)">
            <summary>
            When implemented by a class, draws specific item.
            </summary>
            <param name="data">Specifies item's data to paint.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter.GetCategoryHeaderHeight(Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryHeaderPaintData)">
            <summary>
            When implemented by a class, returns height of given category's header.
            </summary>
            <param name="data">Category data to check.</param>
            <returns>Header's height.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxPainter.GetItemHeight(Alternet.FormDesigner.WinForms.Toolbox.ToolboxItemPaintData)">
            <summary>
            When implemented by a class, returns height of given item.
            </summary>
            <param name="data">Item data to check.</param>
            <returns>Item's height.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite">
            <summary>
            Provides an interface to manipulate toolbox content.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.Painter">
            <summary>
            When implemented by a class, provides an interface to draw toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.ToolboxControl">
            <summary>
            When implemented by a class, provides an interface to display and manipulate list of icons for components and controls that user can place onto design surface.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.CategoryExpandToggleByMouseAllowed">
            <summary>
            When implemented by a class, indicates whether category can be expanded or collapsed by mouse.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.OnContentPreferredSizeChanged(System.Windows.Forms.Control,System.Int32)">
            <summary>
            When implemented by a class, adjusts the specified child control into view on an auto-scroll enabled control.
            </summary>
            <param name="controlToScrollTo">The child control to adjust.</param>
            <param name="vertialOffset">Vertical offset.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.PlaceItemAtDefaultLocation(System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, forces designer instance to select the specified item.
            </summary>
            <param name="item">The ToolboxItem to select.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite.SerializeItemForDragAndDrop(System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, gets a serializable object for drag and drop operations that represents the specified toolbox item.
            </summary>
            <param name="item">ToolboxItem to serialize.</param>
            <returns>Serializable DataObject.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContextMenu">
            <summary>
            Implements a toolbox context menu.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContextMenu.#ctor(Alternet.FormDesigner.WinForms.IToolboxControl)">
            <summary>
            Initializes a new instance of the <c>ToolboxContextMenu</c> class and associates it with the specified container.
            </summary>
            <param name="toolboxControl">A <c>IToolboxControl</c> that is the container of this menu.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContextMenu.ShowContextMenu(System.Drawing.Point)">
            <summary>
            Shows the context menu at the specified location.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization">
            <summary>
            Implements Load and Save logic for toolbox.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.Save(Alternet.FormDesigner.WinForms.IToolboxControl,System.IO.Stream)">
            <summary>
            Saves the toolbox content to the specified stream.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.Load(System.IO.Stream)">
            <summary>
            Loads the toolbox content from the specified stream.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory">
            <summary>
            Contains information about toolbox category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.#ctor(System.String,System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Item})">
            <summary>
            Initializes a new instance of the <c>LoadedCategory</c> class with specified settings.
            </summary>
            <param name="name">Name of the category.</param>
            <param name="items">List of items belongs to the category.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Name">
            <summary>
            Represents name of the category.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Items">
            <summary>
            Represents list of items belongs to the category.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Item">
            <summary>
            Contains information about toolbox item.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Item.#ctor(System.Type,System.Drawing.Design.ToolboxItem)">
            <summary>
            Initializes a new instance of the <c>Item</c> class with specified settings.
            </summary>
            <param name="type">Type of the item.</param>
            <param name="toolboxItem">A <c>ToolboxItem</c> to load and save.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Item.Type">
            <summary>
            Represents type of the item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxSerialization.LoadedCategory.Item.ToolboxItem">
            <summary>
            Represents a  <c>ToolboxItem</c> to load and save.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxStandardItems">
            <summary>
            Provides a collection of the standard toolbox items.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.Toolbox.ToolboxStandardItems.TypesByCategoryName">
            <summary>
            Represents a list of toolbox items arranged by categories.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox">
            <summary>
            Provides ListBox holds a collection of elements for toolbox category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.#ctor(Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl,System.String)">
            <summary>
            Initializes a new instance of the <c>ToolboxCategoryItemsListBox</c> class with specified settings.
            </summary>
            <param name="contentControl"><c>ToolboxContentControl</c> that holds list box content.</param>
            <param name="categoryName">Name of category.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.CategoryName">
            <summary>
            Gets or sets name of category.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.ToolboxItems">
            <summary>
            Gets the toolbox items of the <c>ToolboxCategoryItemsListBox</c>.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.AddItem(System.Drawing.Design.ToolboxItem)">
            <summary>
            Adds an item to the list of items for a list box.
            </summary>
            <param name="item">A <c>ToolboxItem</c> representing the item to add to the collection.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.InsertItem(System.Int32,System.Drawing.Design.ToolboxItem)">
            <summary>
            Inserts an item into the list box at the specified index.
            </summary>
            <param name="index">The zero-based index location where the item is inserted.</param>
            <param name="item">A <c>ToolboxItem</c> representing the item to insert to the collection.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.DoesItemExist(System.Drawing.Design.ToolboxItem)">
            <summary>
            Indicates whether specified item is a member of the collection.
            </summary>
            <param name="item">A <c>ToolboxItem</c> representing the item to locate in the collection.</param>
            <returns>TTrue if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.DoesItemExist(System.String)">
            <summary>
            Indicates whether specified item is a member of the collection.
            </summary>
            <param name="itemName">Item name to locate in the collection.</param>
            <returns>TTrue if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.RemoveItem(System.Drawing.Design.ToolboxItem)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="item">A <c>ToolboxItem</c> representing the item to remove from the collection.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxCategoryItemsListBox.SelectItem(System.Drawing.Design.ToolboxItem)">
            <summary>
            Selects the specified item in a list box.
            </summary>
            <param name="item">A <c>ToolboxItem</c> representing the item to select in the collection.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl">
            <summary>
            Provides a container for the toolbox content which is a collection of category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.#ctor(Alternet.FormDesigner.WinForms.Toolbox.IToolboxContentControlSite)">
            <summary>
            Initializes a new instance of the <c>ToolboxContentControl</c> class with specified site.
            </summary>
            <param name="site">An object that manipulates toolbox content.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.AllItems">
            <summary>
            Represents an array of all toolbox items in the container.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.CategoryNames">
            <summary>
            Represents an array of category names.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.ContentControlSite">
            <summary>
            Represents an object that manipulates toolbox content.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.SelectedCategoryName">
            <summary>
            Returns name of currently selected category or selects category by it's name.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.SelectedItem">
            <summary>
            Returns currently selected toolbox item.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.RenameCategory(System.String,System.String)">
            <summary>
            Renames category.
            </summary>
            <param name="oldName">Previous name of category.</param>
            <param name="newName">New name of category.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.MoveCategory(System.String,System.Int32)">
            <summary>
            Changes position of category within collection.
            </summary>
            <param name="categoryName">Name of category to move.</param>
            <param name="positionDifference">Difference between new and old index.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.AddCategory(System.String)">
            <summary>
            Add new category to the collection.
            </summary>
            <param name="categoryName">Name of category to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.InsertCategory(System.Int32,System.String)">
            <summary>
            Inserts new category to specified position.
            </summary>
            <param name="index">Position to insert.</param>
            <param name="categoryName">Name of category to insert.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.AddItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Adds an item to the list of items of specified category.
            </summary>
            <param name="categoryName">Name of category to add item.</param>
            <param name="item"><c>ToolboxItem</c> to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.InsertItem(System.Int32,System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Adds an item to the list of items of specified category into the specified position.
            </summary>
            <param name="index">Position to insert.</param>
            <param name="categoryName">Name of category to insert item.</param>
            <param name="item"><c>ToolboxItem</c> to insert.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.ClearItemsInCategory(System.String)">
            <summary>
            Removes all items from the list of items of specified category.
            </summary>
            <param name="categoryName">Name of category to clear.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.DoesCategoryExist(System.String)">
            <summary>
            Indicates whether specified category exists.
            </summary>
            <param name="categoryName">Name of category to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.DoesItemExist(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Indicates whether specified item presents in specified category.
            </summary>
            <param name="categoryName">Name of category to check.</param>
            <param name="item">Item to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.DoesItemExist(System.String,System.String)">
            <summary>
            Indicates whether specified item presents in specified category.
            </summary>
            <param name="categoryName">Name of category to check.</param>
            <param name="itemName">Item name to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a category collection can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>An ordered pair of type System.Drawing.Size representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.GetToolsFromCategory(System.String)">
            <summary>
            Returns an array of <c>ToolboxItem</c> within specified category.
            </summary>
            <param name="categoryName">Name of category to check.</param>
            <returns>List of items belongs to category.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.IsCategoryCollapsed(System.String)">
            <summary>
            Indicates whether specified category is in collapsed state.
            </summary>
            <param name="categoryName">Name of category to check.</param>
            <returns>True if category collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.RemoveCategory(System.String)">
            <summary>
            Removes specified category from the category collection.
            </summary>
            <param name="categoryName">Name of category to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.RemoveItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Removes specified item from the item collection of specified category.
            </summary>
            <param name="categoryName">Name of category to remove it's item.</param>
            <param name="item"><c>ToolboxItem</c> to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.SetCategoryCollapsed(System.String,System.Boolean)">
            <summary>
            Set specified category to the collapsed\expanded state.
            </summary>
            <param name="categoryName">name of category to collapse.</param>
            <param name="collapsed">New collapsed state.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.SetSelectedItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Selects the specified item in the item collection of specified category.
            </summary>
            <param name="categoryName">Name of category to select item.</param>
            <param name="item"><c>ToolboxItem</c> to select.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.ScrollToCategory(System.String)">
            <summary>
            Scrolls control content to the specified category.
            </summary>
            <param name="categoryName">Name of category to make visible.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.Toolbox.ToolboxContentControl.ScrollToItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Scrolls control content to make visible specified item.
            </summary>
            <param name="categoryName">Name of category holds item.</param>
            <param name="item"><c>ToolboxItem</c> to make visible.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerAssemblyReferenceResolver">
            <summary>
            Provides functionality to resolve assembly references.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerAssemblyReferenceResolver.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>FormDesignerAssemblyReferenceResolver</c> class with specified settings.
            </summary>
            <param name="searchPaths">Collection of assembly search paths.</param>
            <param name="frameworkPath">Path to the current framework.</param>
            <param name="baseDirectory">Path to the base project's directory.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerOptions">
            <summary>
            Provides designer options for grid settings, grid size, snap lines and smart tags.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerOptions.#ctor(Alternet.FormDesigner.WinForms.FormDesignerControl)">
            <summary>
            Initializes a new instance of the <c>FormDesignerOptions</c> class with specified designer.
            </summary>
            <param name="designer"><c>FormDesignerControl</c> which behaviour will be defined by this new instance.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerOptions.GridSize">
            <summary>
            Sets the default X and Y grid setting on designer. Effective only when UseSnapLines is set false.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerOptions.ShowGrid">
            <summary>
            Controls whether designer should display a sizing grid. Effective only when UseSnapLines is set false.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerOptions.SnapToGrid">
            <summary>
            Controls whether designer should snap to grid dots. Effective only when UseSnapLines is set false.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerOptions.UseSnapLines">
            <summary>
            Controls whether designer should use snap lines. If true, snap lines will be used as guides. If false, grid lines will be used. Designer needs to be reloaded for this change to take effect.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerOptions.UseSmartTags">
            <summary>
            Controls whether designer should show smart tag popup windows. Designer needs to be reloaded for this change to take effect.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.ContextMenuHostControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ContextMenuHostControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ContextMenuHostControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.EventBindingServiceBase">
            <summary>
            This class provides a default implementation of the event binding service. This class is abstract.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.#ctor(System.IServiceProvider,Alternet.FormDesigner.WinForms.InsertTextIntoCodeDelegate,System.Func{System.IO.Stream},System.String,System.String,System.Func{Alternet.FormDesigner.WinForms.NavigateToUserMethodRequestedEventArgs,System.Boolean})">
            <summary>
            Initializes a new instance of the <c>EventBindingServiceBase</c> class with specified settings.
            </summary>
            <param name="provider"><c>IServiceProvider</c> for this new instance.</param>
            <param name="insertTextIntoCodeFunc">Method used to insert text into the code.</param>
            <param name="openStreamForReadingFunc">Method used to open stream in read mode.</param>
            <param name="userFileName">File name with the Form designer code.</param>
            <param name="designedClassName">Name of the class being designed.</param>
            <param name="showUserCodeFunc">Method used to show user code.</param>
            <remarks>You must provide a service provider to the binding service. We give it our host.</remarks>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.DesignedClassName">
            <summary>
            Represents name of the class being designed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.UserFileName">
            <summary>
            Represents file name with the form designer code.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
            <summary>
            This creates a name for an event handling method for the given component and event.
            The name that is created is guaranteed to be unique in the user's source code.
            </summary>
            <param name="component"><c>IComponent</c> owns this method.</param>
            <param name="e">Information about method.</param>
            <returns>Unique method name for specified component.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
            <summary>
            Retrieves a collection of strings.  Each string is the name of a method
            in user code that has a signature that is compatible with the given event.
            </summary>
            <param name="e">Condition for methods.</param>
            <returns>List of methods suitable specified condition.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetEvent(System.ComponentModel.PropertyDescriptor)">
            <summary>
            For properties that are representing events, this will return the event that the property represents.
            </summary>
            <param name="property">Information about property.</param>
            <returns><c>EventDescriptor</c> if succeed; otherwise null.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
            <summary>
            Converts a set of events to a set of properties.
            </summary>
            <param name="events">List of events to convert.</param>
            <returns>List of properties.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetEventProperty(System.ComponentModel.EventDescriptor)">
            <summary>
            Converts a single event to a property.
            </summary>
            <param name="e">Event to convert.</param>
            <returns>Converted property.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
            <summary>
            Displays the user code for the given event.
            </summary>
            <param name="component"><c>IComponent</c> owns specified event.</param>
            <param name="e">Information about event.</param>
            <returns>This will return true if the user code could be displayed, or false otherwise.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.ShowCode">
            <summary>
            Shows the user code. This method does not show any particular code; generally it shows the last code the
            user typed.  This returns true if it was possible to show the code, or false if not.
            We are never showing code since we do not generate handler methods.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.ShowCode(System.Int32)">
            <summary>
            Shows the user code at the given line number.  Line
            numbers are one-based.  This returns true if it was
            possible to show the code, or false if not. We are
            never showing code since we do not generate handler methods.
            </summary>
            <param name="lineNumber">Number of line to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.FreeMethod(System.Object,System.ComponentModel.EventDescriptor,System.String)">
            This provides a notification that a particular method
            is no longer being used by an event handler.  Some implementations
            may want to remove the event hander when no events are using
            it.  By overriding UseMethod and FreeMethod, an implementation
            can know when a method is no longer needed.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetService(System.Type)">
            Gets the requested service from our service provider (the host).
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.ShowCode(System.Object,System.ComponentModel.EventDescriptor,System.String)">
            Shows the body of the user code with the given method
            name. This returns true if it was possible to show
            the code, or false if not. We are never showing code
            since we do not generate handler methods.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.UseMethod(System.Object,System.ComponentModel.EventDescriptor,System.String)">
            This provides a notification that a particular method
            is being used by an event handler.  Some implementations
            may want to remove the event hander when no events are using
            it.  By overriding UseMethod and FreeMethod, an implementation
            can know when a method is no longer needed.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.ValidateMethodName(System.String)">
            This validates that the provided method name is valid for
            the language / script being used.  The default does nothing.
            You may override this and throw an exception if the name
            is invalid for your use.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.GetEventDescriptorHashCode(System.ComponentModel.EventDescriptor)">
            Generates a key based on a method name and it's parameters by just concatenating the
            parameters.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor">
            This is an EventDescriptor cleverly wrapped in a PropertyDescriptor
            of type String.  Note that we now handle sub-objects by storing their
            event information in their base component's site's dictionary.
            Note also that when a value is set for this property we will code-gen
            the event method.  If the property is set to a new value we will
            remove the old event method ONLY if it is empty.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.#ctor(System.ComponentModel.EventDescriptor,Alternet.FormDesigner.WinForms.EventBindingServiceBase)">
            Creates a new EventPropertyDescriptor.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.ComponentType">
            Retrieves the type of the component this PropertyDescriptor is bound to.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.Converter">
            Retrieves the type converter for this property.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.IsReadOnly">
            Indicates whether this property is read only.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.PropertyType">
            Retrieves the type of the property.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.Event">
            Retrieves the event descriptor we are representing.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.CanResetValue(System.Object)">
            Indicates whether reset will change the value of the component.  If there
            is a DefaultValueAttribute, then this will return true if getValue returns
            something different than the default value.  If there is a reset method and
            a shouldPersist method, this will return what shouldPersist returns.
            If there is just a reset method, this always returns true.  If none of these
            cases apply, this returns false.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.GetValue(System.Object)">
            Retrieves the current value of the property on component,
            invoking the getXXX method.  An exception in the getXXX
            method will pass through.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.ResetValue(System.Object)">
            Will reset the default value for this property on the component.  If
            there was a default value passed in as a DefaultValueAttribute, that
            value will be set as the value of the property on the component.  If
            there was no default value passed in, a ResetXXX method will be looked
            for.  If one is found, it will be invoked.  If one is not found, this
            is a nop.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.SetValue(System.Object,System.Object)">
            This will set value to be the new value of this property on the
            component by invoking the setXXX method on the component.  If the
            value specified is invalid, the component should throw an exception
            which will be passed up.  The component designer should design the
            property so that getXXX following a setXXX should return the value
            passed in if no exception was thrown in the setXXX call.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.ShouldSerializeValue(System.Object)">
             Indicates whether the value of this property needs to be persisted. In
             other words, it indicates whether the state of the property is distinct
             from when the component is first instantiated. If there is a default
             value specified in this PropertyDescriptor, it will be compared against the
             property's current value to determine this.  If there it's, the
             shouldPersistXXX method is looked for and invoked if found.  If both
             these routes fail, true will be returned.
            
             If this returns false, a tool should not persist this property's value.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter">
            Implements a type converter for event objects.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.#ctor(System.ComponentModel.EventDescriptor,Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor)">
            Creates a new EventConverter.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            Determines if this converter can convert an object in the given source
            type to the native type of the converter.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            Determines if this converter can convert an object to the given destination
            type.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            Converts the given object to the converter's native type.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            Converts the given object to another type.  The most common types to convert
            are to and from a string object.  The default implementation will make a call
            to ToString on the object if the object is valid and if the destination
            type is string.  If this cannot convert to the destination type, this will
            throw a NotSupportedException.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            Retrieves a collection containing a set of standard values
            for the data type this validator is designed for.  This
            will return null if the data type does not support a
            standard set of values.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            Determines if the list of standard values returned from
            GetStandardValues is an exclusive list.  If the list
            is exclusive, then no other values are valid, such as
            in an enum data type.  If the list is not exclusive,
            then there are other valid values besides the list of
            standard values GetStandardValues provides.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.EventConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            Determines if this object supports a standard set of values
            that can be picked from a list.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.EventBindingServiceBase.EventPropertyDescriptor.ReferenceEventClosure">
            This is a combination of a reference and a property, so that it can be used
            as the key of a hashtable.  This is because we may have subobjects that share
            the same property.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.License.FormDesignerWinFormsLicenseProvider">
            <summary>
            Provides a license provider functionality for the <c>FormDesignerControl</c>.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.ResourcesAssemblyMaker">
            <summary>
            This is used to generate a temporary assembly needed to load resources referenced from serialized code.
            For example, a bitmap is stored in assembly resources (project properties), and a PictureBox on form references it.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.CodeGenerationUtility">
            <summary>
            Stores a set of options used for form designer code generation.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CodeGenerationUtility.GeneratorOptions">
            <summary>
            Gets or sets an options that define code generation rules.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource">
            <summary>
            Provides extended properties and methods for a Form Designer control's data source.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.#ctor(System.String,System.Func{System.String,Alternet.FormDesigner.WinForms.IFormDesignerTextSource},System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.DesignerAssemblyResources},System.String)">
            <summary>
            Initializes a new instance of the <c>EditorFormDesignerDataSource</c> class with specified settings.
            </summary>
            <param name="userCodeFileName">Name of the file with user code.</param>
            <param name="openTextSourceFunc">Function responsible to open text source.</param>
            <param name="assemblyResources">The list of assembly resources.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.DesignedClassFullName">
            <summary>
            Gets the fully qualified name of designed class.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.DesignerFileName">
            <summary>
            Gets name of the file with designer generated code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.DesignerTextSource">
            <summary>
            Gets IFormDesignerTextSource corresponding to the designer generated code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.DefaultResourceFileName">
            <summary>
            Gets name of the resource file.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.ResourceFileName">
            <summary>
            Gets name of the resource file.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.DefaultResourceTextSource">
            <summary>
            Gets IFormDesignerTextSource corresponding to the resource code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.ResourceTextSource">
            <summary>
            Gets IFormDesignerTextSource corresponding to the resource code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.UserCodeFileName">
            <summary>
            Gets name of the file with user code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.UserCodeTextSource">
            <summary>
            Gets IFormDesignerTextSource corresponding to the user code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.AssemblyResources">
            <summary>
            Gets the list of form designer's assembly resources.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.IsModified">
            <summary>
            Represents a value indicating whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.GetResourceFileName(System.Globalization.CultureInfo)">
            <summary>
            Finds resource file name.
            </summary>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <returns>Name of the resource file containing culture-specific resource data.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.GetResourceTextSource(System.Globalization.CultureInfo)">
            <summary>
            Finds text source containing resource data.
            </summary>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <returns>IFormDesignerTextSource containing culture-specific resource data.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.Save">
            <summary>
            Serializes designer content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.InsertTextIntoUserCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation[])">
            <summary>
            Inserts specified text fragments into the user code.
            </summary>
            <param name="operations">Contains data to insert.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.OpenDesignerStream(Alternet.FormDesigner.WinForms.StreamAccessMode)">
            <summary>
            Opens designer stream with specified access mode.
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <returns>Designer stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.OpenResourceStream(Alternet.FormDesigner.WinForms.StreamAccessMode,System.Globalization.CultureInfo)">
            <summary>
            Opens resource stream with specified access mode.
            </summary>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.OpenUserCodeStreamForReading">
            <summary>
            Opens user code stream with default access mode.
            </summary>
            <returns>User code stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.EditorFormDesignerDataSource.ReplaceTextInDesignerCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation[])">
            <summary>
            Replaces specified text fragments within the user code.
            </summary>
            <param name="operations">Contains data to replace.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.CustomToolboxImage">
            <summary>
            Represents the toolbox image for different resolution.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.CustomToolboxImage.#ctor(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <c>CustomToolboxImage</c> class with specific settings.
            </summary>
            <param name="image">The image in normal resolution.</param>
            <param name="imageHighDpi">The image in HighDpi resolution.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CustomToolboxImage.Image">
            <summary>
            Represents an image in normal resolution.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CustomToolboxImage.ImageHighDpi">
            <summary>
            Represents an image in HighDpi resolution.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerAssemblyResources">
            <summary>
            Represents a single resource for designer's assembly.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>DesignerAssemblyResources</c> class with specified settings.
            </summary>
            <param name="resXFilePath">The full path of the .resx file.</param>
            <param name="codeFilePath">The full path of the code file.</param>
            <param name="fullClassName">The fully qualified class name.</param>
            <param name="baseDirectoryPath">The base directory for the assembly resource.</param>
            <param name="assemblyRootNamespace">The assembly root namespace.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.AssemblyRootNamespace">
            <summary>
            Represents the assembly root namespace.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.BaseDirectoryPath">
            <summary>
            Represents the base directory for the assembly resource.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.CodeFilePath">
            <summary>
            Represents the full path of the code file.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.FullClassName">
            <summary>
            Represents the fully qualified class name.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.ResXFilePath">
            <summary>
            Represents the full path of the .resx file
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerAssemblyResources.FromResXFilePath(System.String,Alternet.FormDesigner.WinForms.Language,System.String,System.String)">
            <summary>
            Creates <c>DesignerAssemblyResources</c> using specified parameters.
            </summary>
            <param name="resXFilePath">The full path of the .resx file.</param>
            <param name="language">The .NET language used to write designer's code.</param>
            <param name="assemblyRootNamespace">The assembly root namespace.</param>
            <returns></returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerLoadingCompilerErrorsException">
            <summary>
            Represents errors that occur during designer's content loading.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerLoadingCompilerErrorsException.#ctor(System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.DesignerCompilerError})">
            <summary>
            Initializes a new instance of the <c>DesignerLoadingCompilerErrorsException</c> class with specified errors.
            </summary>
            <param name="errors">List of the <c>DesignerCompilerError</c>.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerLoadingCompilerErrorsException.CompilerErrors">
            <summary>
            Represents list of the <c>DesignerCompilerError</c> occurred during designer's content loading.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerImportedNamespaces">
            <summary>
            Represents a collection of default namespaces  for the designer control.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.DesignerImportedNamespaces.DefaultForVisualBasic">
            <summary>
            Represents a collection of namespaces default for Visual Basic language project.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerImportedNamespaces.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <c>DesignerImportedNamespaces</c> class with specified namespace's list.
            </summary>
            <param name="namespaces">List of namespaces.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerImportedNamespaces.Namespaces">
            <summary>
            Gets or sets a list of namespaces.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerCompilerError">
            <summary>
            Provides data for designer compiler error.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerCompilerError.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>DesignerCompilerError</c> class with specified parameters.
            </summary>
            <param name="filePath">The name of the file where error occurred.</param>
            <param name="lineNumber">The number of the line where error occurred.</param>
            <param name="characterNumber">The number of the character where error occurred.</param>
            <param name="message">Text describes error.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerCompilerError.FilePath">
            <summary>
            Represents the name of the file where error occurred.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerCompilerError.LineNumber">
            <summary>
            Represents the number of the line where error occurred.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerCompilerError.CharacterNumber">
            <summary>
            Represents the number of the character where error occurred.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerCompilerError.Message">
            <summary>
            Represents the text describes error.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerCompilerError.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>DesignerCompilerError</c>.
            </summary>
            <returns>A <c>String</c> that represents the current <c>DesignerCompilerError.</c></returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerCompilerErrorClickEventArgs">
            <summary>
            Provides data for the <c>CompilerErrorClick</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerCompilerErrorClickEventArgs.#ctor(Alternet.FormDesigner.WinForms.DesignerCompilerError)">
            <summary>
            Initializes a new instance of the <c>DesignerCompilerErrorClickEventArgs</c> class with specified error.
            </summary>
            <param name="error">The error occurred while compilation designer's content.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerCompilerErrorClickEventArgs.Error">
            <summary>
            Represents the error occurred while compilation designer's content.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.CommandKeyBinding">
            <summary>
            Represents a key combination bound with some action.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.CommandKeyBinding.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <c>CommandKeyBinding</c> class with specified settings.
            </summary>
            <param name="keyCode">The keys associated with the action.</param>
            <param name="modifierKeys">The modifier keys associated with the action.</param>
            <param name="do">Action that executes when the key combination is pressed.</param>
            <param name="canDo">The method to verify whether action can be performed.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CommandKeyBinding.KeyCode">
            <summary>
            Represents the keys associated with the action.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CommandKeyBinding.Modifiers">
            <summary>
            Represents the modifier keys associated with the action.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CommandKeyBinding.Do">
            <summary>
            Represents the action that executes when the key combination is pressed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.CommandKeyBinding.CanDo">
            <summary>
            Represents the method to verify whether action can be performed.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IOutlineControl">
            <summary>
            Represents the outline control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IOutlineControl.FormDesignerControl">
            <summary>
            When implemented by a class, gets or sets an <c>IFormDesignerControl</c> related to this outline control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IOutlineControl.Toolbox">
            <summary>
            When implemented by a class, gets or sets an <c>IToolboxControl</c> related to this outline control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IOutlineControl.ShowRenameSelectedNodeUI">
            <summary>
            When implemented by a class, starts the editing of the outline item name.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IOutlineControl.MoveDown">
            <summary>
            When implemented by a class, moves outline item down in the container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IOutlineControl.MoveUp">
            <summary>
            When implemented by a class, moves outline item up in the container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IOutlineControl.MoveIn">
            <summary>
            When implemented by a class, moves outline item into the next container.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IOutlineControl.MoveOut">
            <summary>
            When implemented by a class, moves outline item out of current container.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.OutlineControlTypeNameDisplayStyle">
            <summary>
            Defines appearance of the item's type name in the outline control.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.OutlineControlTypeNameDisplayStyle.None">
            <summary>
            Specifies no type name.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.OutlineControlTypeNameDisplayStyle.Short">
            <summary>
            Specifies short type name.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.OutlineControlTypeNameDisplayStyle.Full">
            <summary>
            Specifies full type name.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerTextSource">
            <summary>
            Represents a properties and methods for a Form Designer control's text.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerTextSource.Text">
            <summary>
            When implemented by a class, gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerTextSource.InsertText(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation[])">
            <summary>
            When implemented by a class, performs number of text insertions defined in the specified operations.
            </summary>
            <param name="operations">List of operation each one contains insertion data.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerTextSource.ReplaceText(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation[])">
            <summary>
            When implemented by a class, performs number of text replacements defined in the specified operations.
            </summary>
            <param name="operations">List of operation each one contains replacement data.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerTextSource.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves <c>IFormDesignerTextSource</c> content to the specific file.
            </summary>
            <param name="filePath">Name of the file to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerTextSource.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads the contents of a text file into <c>Text</c> property.
            </summary>
            <param name="filePath">Represents name of file on disk.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations">
            <summary>
            Represents operations applied to <c>IFormDesignerTextSource</c> content.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation">
            <summary>
            Represents properties applied to the text insertion operation.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation.InsertionPoint">
            <summary>
            Gets or sets a position to insert text.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation.Text">
            <summary>
            Gets or sets a string to insert.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation">
            <summary>
            Represents properties applied to the text replacement operation.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation.NewText">
            <summary>
            Gets or set a string replaces old text.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation.OldTextRegion">
            <summary>
            Gets or sets an area where new text will be placed.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.PlaceToolboxItemAtDefaultLocationEventArgs">
            <summary>
            Provides parameters for PlaceItemAtDefaultLocation event.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.PlaceToolboxItemAtDefaultLocationEventArgs.#ctor(System.Drawing.Design.ToolboxItem)">
            <summary>
            Creates a new instance of <c>PlaceToolboxItemAtDefaultLocationEventArgs</c> class.
            </summary>
            <param name="item">The toolbox item.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.PlaceToolboxItemAtDefaultLocationEventArgs.Item">
            <summary>
            Gets the toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.PlaceToolboxItemAtDefaultLocationEventArgs.Handled">
            <summary>
            Gets or sets the flag indicating that this event has been handled by a user.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IUndoEngine">
            <summary>
            Represents properties declaration for undo service.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IUndoEngine.Engine">
            <summary>
            When implemented by a class, represents an object used to provide undo/redo functionality at design time.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerLoadingErrorEventArgs">
            <summary>
            Provides data for the <c>LoadingErrorOccured</c> handler.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerLoadingErrorEventArgs.#ctor(System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.DesignerCompilerError})">
            <summary>
            Initializes a new instance of the <c>DesignerLoadingErrorEventArgs</c> class with specified errors.
            </summary>
            <param name="errors">List of the <c>DesignerCompilerError</c>.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerLoadingErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DesignerLoadingErrorEventArgs</c> class with specified error message.
            </summary>
            <param name="message">Text describes error.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerLoadingErrorEventArgs.Errors">
            <summary>
            Represents list of the <c>DesignerCompilerError</c> occurred during designer's content loading.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerLoadingErrorEventArgs.Message">
            <summary>
            Represents text describes error occurred during designer's content loading.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.NavigateToUserMethodRequestedEventArgs">
            <summary>
            Provides data for the <c>NavigateToUserMethodRequested</c> handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.NavigateToUserMethodRequestedEventArgs.LineNumber">
            <summary>
            Represents number of line to navigate.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.NavigateToUserMethodRequestedEventArgs.MethodName">
            <summary>
            Represents name of method to navigate.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies">
            <summary>
            Represents a collection of assemblies that can be referenced in the form designer's content.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.DefaultForCSharp">
            <summary>
            Represents a collection of assemblies default for C# language project.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.DefaultForVisualBasic">
            <summary>
            Represents a collection of assemblies default for Visual Basic language project.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.DefaultForTypeScript">
            <summary>
            Represents a collection of assemblies default for TypeScript language project.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.DefaultForIronPython">
            <summary>
            Represents a collection of assemblies default for Iron Python language project.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <c>DesignerReferencedAssemblies</c> class with specified assemblies's list.
            </summary>
            <param name="assemblyNames">List of assemblies.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DesignerReferencedAssemblies</c> class with specified assemblies's list.
            </summary>
            <param name="assemblyNames">List of assemblies.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <c>DesignerReferencedAssemblies</c> class with specified settings.
            </summary>
            <param name="searchPaths">Collection of assembly search paths.</param>
            <param name="frameworkPath">Path to the current framework.</param>
            <param name="baseDirectory">Path to the base project's directory.</param>
            <param name="assemblyNames">List of assemblies.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Alternet.Common.TargetNETFrameworkVersion)">
            <summary>
            Initializes a new instance of the <c>DesignerReferencedAssemblies</c> class with specified parameters.
            </summary>
            <param name="searchPaths">Collection of assembly search paths.</param>
            <param name="frameworkPath">Path to the current framework.</param>
            <param name="baseDirectory">Path to the base project's directory.</param>
            <param name="assemblyNames">List of assemblies.</param>
            <param name="targetFrameworkVersion">Version of the .NET Framework to be used for locating Framework assemblies.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.AssemblyNames">
            <summary>
            Represents a list of assemblies.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.BaseDirectory">
            <summary>
            Represents path to the base project's directory.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.SearchPaths">
            <summary>
            Represents a collection of assembly search paths.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.TargetFrameworkVersion">
            <summary>
            Gets or sets version of the .NET Framework to be used for locating Framework assemblies.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.FrameworkPath">
            <summary>
            Represents path to the current framework.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.WithAssemblyNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of assemblies updated to include only specified assemblies.
            </summary>
            <param name="assemblyNames">List of new assemblies.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.AddAssemblyNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of assemblies updated to include specified assemblies.
            </summary>
            <param name="assemblyNames">List of additional assemblies.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.AddAssemblyName(System.String)">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of assemblies updated to include specified assembly.
            </summary>
            <param name="assemblyName">Additional assembly.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.WithSearchPaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of search paths updated to include only specified search paths.
            </summary>
            <param name="searchPaths">List of new search paths.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.AddSearchPaths(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of search paths updated to include specified search paths.
            </summary>
            <param name="searchPaths">List of additional search paths.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies.AddSearchPath(System.String)">
            <summary>
            Creates a new <c>DesignerReferencedAssemblies</c> instance with the list of search paths updated to include specified search path.
            </summary>
            <param name="searchPath">Additional search path.</param>
            <returns>Updated <c>DesignerReferencedAssemblies</c>.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.StreamAccessMode">
            <summary>
            Defines constants for read, write access to a stream.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.StreamAccessMode.Read">
            <summary>
            Read access to the stream. Data can be read from the stream.
            </summary>
        </member>
        <member name="F:Alternet.FormDesigner.WinForms.StreamAccessMode.Write">
            <summary>
            Write access to the stream. Data can be written to the stream.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.InsertTextIntoCodeDelegate">
            <summary>
            Represents a method that will handle inserting text into user's code.
            </summary>
            <param name="operations">Contains data to insert.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.OpenStreamDelegate">
            <summary>
            Represents a method that will handle opening form designer-generated code
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <returns>Stream to manipulate designer code.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.OpenStreamForReadingDelegate">
            <summary>
            Represents a method that will handle opening user-defined code.
            </summary>
            <returns>Stream to read user code.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerDataSource">
            <summary>
            Represents a properties and methods for a Form Designer control's data source.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.DesignedClassFullName">
            <summary>
            When implemented by a class, gets the fully qualified name of designed class.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.DesignerFileName">
            <summary>
            When implemented by a class, gets name of the file with designer generated code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.UserCodeFileName">
            <summary>
            When implemented by a class, gets name of the file with user code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.IsModified">
            <summary>
            When implemented by a class, represents a value indicating whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.AssemblyResources">
            <summary>
            When implemented by a class, gets the list of form designer's assembly resources.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.InsertTextIntoUserCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation[])">
            <summary>
            When implemented by a class, inserts specified text fragments into the user code.
            </summary>
            <param name="operations">Contains data to insert.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.ReplaceTextInDesignerCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation[])">
            <summary>
            When implemented by a class, replaces specified text fragments within the user code.
            </summary>
            <param name="operations">Contains data to replace.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.OpenDesignerStream(Alternet.FormDesigner.WinForms.StreamAccessMode)">
            <summary>
            When implemented by a class, opens designer stream with specified access mode.
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <returns>Designer stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.OpenResourceStream(Alternet.FormDesigner.WinForms.StreamAccessMode,System.Globalization.CultureInfo)">
            <summary>
            When implemented by a class, opens resource stream with specified access mode.
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.OpenUserCodeStreamForReading">
            <summary>
            When implemented by a class, opens user code stream with default access mode.
            </summary>
            <returns>User code stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerDataSource.GetResourceFileName(System.Globalization.CultureInfo)">
            <summary>
            When implemented by a class, gets resource file specific to the culture.
            </summary>
            <param name="cultureInfo">Culture information</param>
            <returns></returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerDataSource">
            <summary>
            Provides properties and methods for a Form Designer control's data source.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.DesignerAssemblyResources},System.String)">
            <summary>
            Initializes a new instance of the <c>FormDesignerDataSource</c> class with specified settings.
            </summary>
            <param name="userCodeFileName">Name of the file with user code.</param>
            /// <param name="namespaceName">Root namespace name.</param>
            <param name="assemblyResources">The list of assembly resources.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.DesignedClassFullName">
            <summary>
            Gets the fully qualified name of designed class.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.DesignerFileName">
            <summary>
            Gets name of the file with designer generated code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.DefaultResourceFileName">
            <summary>
            Gets name of the resource file.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.ResourceFileName">
            <summary>
            Gets name of the resource file.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.UserCodeFileName">
            <summary>
            Gets name of the file with user code.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.AssemblyResources">
            <summary>
            Gets the list of form designer's assembly resources.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerDataSource.IsModified">
            <summary>
            Represents a value indicating whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.InsertTextIntoUserCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextInsertionOperation[])">
            <summary>
            Inserts specified text fragments into the user code.
            </summary>
            <param name="operations">Contains data to insert.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.ReplaceTextInDesignerCode(Alternet.FormDesigner.WinForms.FormDesignerTextSourceOperations.TextReplacementOperation[])">
            <summary>
            Replaces specified text fragments within the user code.
            </summary>
            <param name="operations">Contains data to replace.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.OpenDesignerStream(Alternet.FormDesigner.WinForms.StreamAccessMode)">
            <summary>
            Opens designer stream with specified access mode.
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <returns>Designer stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.OpenResourceStream(Alternet.FormDesigner.WinForms.StreamAccessMode,System.Globalization.CultureInfo)">
            <summary>
            Opens resource stream with specified access mode.
            </summary>
            <param name="mode">Specifies operation can be performed on the stream.</param>
            <param name="cultureInfo">Specifies information about a specific culture.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerDataSource.OpenUserCodeStreamForReading">
            <summary>
            Opens user code stream with default access mode.
            </summary>
            <returns>User code stream.</returns>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerHostContext">
            <summary>
            Encapsulates designer host together with the actual form designer control and its state.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerHostContext.#ctor(Alternet.FormDesigner.WinForms.FormDesignerControl,Alternet.FormDesigner.WinForms.IFormDesignerDataSource)">
            <summary>
            Initializes a new instance of the <c>FormDesignerHostContext</c> class with specified settings.
            </summary>
            <param name="owner"><c>FormDesignerControl</c> that owns this new instance.</param>
            <param name="source">Data source of the designer control.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.DesignerControl">
            <summary>
            Gets the view for the root designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.DesignerHost">
            <summary>
            Gets <c>IDesignerHost</c> object encapsulated in this host.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.DesignerLoader">
            <summary>
            Gets an object provides load and save designer's content functionality.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.EventBindingService">
            <summary>
            Gets an object provides a service for registering event handlers for component events.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.PrimarySelection">
            <summary>
            Gets first selected component or control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.ResourceService">
            <summary>
            Gets an object provides functionality to access resource readers and writers for specific System.Globalization.CultureInfo resource types.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.SelectedComponents">
            <summary>
            Gets or sets list of selected components or controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.ServiceContainer">
            <summary>
            Gets a container for designer-related services.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.Source">
            <summary>
            Gets data source of the designer control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.ToolboxService">
            <summary>
            Gets an object provides communication between the designer and toolbox.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerHostContext.Owner">
            <summary>
            Gets an actual form designer control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerHostContext.Dispose">
            <summary>
            Disposes <c>FormDesignerHostContext</c> object and releases all associated resources.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerHostContext.Save">
            <summary>
            Saves designer's content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerHostContext.SimulateComponentChangeTransactionForEditorServiceContext(System.Object)">
            <summary>
            Detects and fixes the issue when changes are done to component without creating a transaction by
            System.Windows.Forms.Design.EditorServiceContext.EditValue(). For example, ImageBox smart tag editor
            uses this method to set the Image property, and thus designer code doesn't get saved to source.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader">
             This is a designer loader that is based on XML.  We use reflection
             to write out values into an XML document.  The techniques used in this
             designer loader to discover, via reflection, the properties and
             objects that need to be saved or loaded can be applied to any
             persistence format.
            
             The XML format we use here is not terribly user-friendly, but
             is fairly straightforward.  It handles the vast majority of
             persistence requirements including collections, instance descriptors,
             and binary data.
            
             In addition to maintaining the buffer in the form of an XmlDocument,
             we also maintain it in a CodeCompileUnit. We use this DOM to generate
             C# and VB code, as well as to compile the buffer into an executable.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.#ctor">
            Empty constructor simply creates a new form.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.#ctor(System.String)">
            This constructor takes a file name.  This file
            should exist on disk and consist of XML that
            can be read by a data set.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.LoaderHost">
            <summary>
            Gets an object that provides an interface that can extend a designer host to support loading from a serialized state.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
            <summary>
            Begins loading a designer.
            </summary>
            <param name="host">The loader host through which this loader loads components.</param>
            <remarks>Called by the host when we load a document.</remarks>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.Dispose">
            <summary>
            Releases all resources used by this <c>XmlFormDesignerLoader</c>.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.Flush">
            This method is called by the designer host whenever it wants the
            designer loader to flush any pending changes.  Flushing changes
            does not mean the same thing as saving to disk.  For example,
            In Visual Studio, flushing changes causes new code to be generated
            and inserted into the text editing window.  The user can edit
            the new code in the editing window, but nothing has been saved
            to disk.  This sample adheres to this separation between flushing
            and saving, since a flush occurs whenever the code windows are
            displayed or there is a build. Neither of those items demands a save.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType.-or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.Build">
            Called when we want to build an executable. Returns true if we succeeded.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.PromptDispose">
            This method prompts the user to see if it is OK to dispose this document.
            The prompt only happens if the user has made changes.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.Save(System.Boolean)">
            Save the current state of the loader. If the user loaded the file
            or saved once before, then he doesn't need to select a file again.
            Unless this is being called as a result of "Save As..." being clicked,
            in which case forceFilePrompt will be true.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.GetConversionSupported(System.ComponentModel.TypeConverter,System.Type)">
            Simple helper method that returns true if the given type converter supports
            two-way conversion of the given type.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.ReadEvent(System.Xml.XmlNode,System.Object,System.Collections.ArrayList)">
            Reads an Event node and binds the event.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.ReadFile(System.String,System.Collections.ArrayList,System.Xml.XmlDocument@)">
             This method is used to parse the given file.  Before calling this
             method the host member variable must be setup.  This method will
             create a data set, read the data set from the XML stored in the
             file, and then walk through the data set and create components
             stored within it.  The data set is stored in the persistedData
             member variable upon return.
            
             This method never throws exceptions.  It will set the successful
             ref parameter to false when there are catastrophic errors it can't
             resolve (like being unable to parse the XML).  All error exceptions
             are added to the errors array list, including minor errors.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.ReadObject(System.Xml.XmlNode,System.Collections.ArrayList)">
            Reads the "Object" tags. This returns an instance of the
            newly created object. Returns null if there was an error.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.ReadProperty(System.Xml.XmlNode,System.Object,System.Collections.ArrayList)">
            Parses the given XML node and sets the resulting property value.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.ReadValue(System.Xml.XmlNode,System.ComponentModel.TypeConverter,System.Collections.ArrayList,System.Object@)">
            Generic function to read an object value.  Returns true if the read
            succeeded.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.UpdateCodeWindows">
            This method writes out the contents of our designer in C#, VB, and XML.
            For the first two, it generates code from our codeCompileUnit. For the XML,
            it writes out the contents of xmlDocument.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteBinary(System.Xml.XmlDocument,System.Byte[])">
             This method writes a given byte[] into the XML document, returning the node that
             it just created.  Byte arrays have the following XML:
            
             <c>
             <Binary>
             64 bit encoded string representing binary data
             </Binary>
             </c>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteCollection(System.Xml.XmlDocument,System.Collections.IList,System.Xml.XmlNode)">
            Writes the given IList contents into the given parent node.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteInstanceDescriptor(System.Xml.XmlDocument,System.ComponentModel.Design.Serialization.InstanceDescriptor,System.Object)">
             This method writes a given instance descriptor into the XML document, returning a node
             that it just created.  Instance descriptors have the following XML:
            
             <c>
             <InstanceDescriptor member="asdfasdfasdf">
             <Object>
             param value
             </Object>
             </InstanceDescriptor>
             </c>
            
             Here, member is a 64 bit encoded string representing the member, and there is one Parameter
             tag for each parameter of the descriptor.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteObject(System.Xml.XmlDocument,System.Collections.IDictionary,System.Object)">
             This method writes the given object out to the XML document.  Objects have
             the following XML:
            
             <c>
             <Object type="object type" name="object name" children="child property name">
            
             </Object>
             </c>
            
             Here, Object is the element that defines a custom object.  Type is required
             and specifies the data type of the object.  Name is optional.  If present, it names
             this object, adding it to the container if the object is an IComponent.
             Finally, the children attribute is optional.  If present, this object can have
             nested objects, and those objects will be added to the given property name.  The
             property must be a collection property that returns an object that implements IList.
            
             Inside the object tag there can be zero or more of the following subtags:
            
             InstanceDescriptor -- describes how to create an instance of the object.
             Property -- a property set on the object
             Event -- an event binding
             Binary -- binary data
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteProperties(System.Xml.XmlDocument,System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Xml.XmlNode,System.String)">
            This method writes zero or more property elements into the given parent node.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteReference(System.Xml.XmlDocument,System.ComponentModel.IComponent)">
             Writes a reference to the given component.  Emits the following
             XML:
            
             <c>
             <Reference name="component name"></Reference>
             </c>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.XmlFormDesignerLoader.WriteValue(System.Xml.XmlDocument,System.Object,System.Xml.XmlNode)">
            This method writes the given object into the given parent node.  It returns
            true if it was successful, or false if it was unable to convert the object
            to XML.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.PropertyGridControl">
            <summary>
            Provides a user interface for browsing the properties of an object.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.PropertyGridControl.#ctor">
            <summary>
            Initializes a new instance of the <c>PropertyGridControl</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.PropertyGridControl.FormDesignerControl">
            <summary>
            Gets or sets an <c>IFormDesignerControl</c> related to this property grid.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.ResourceService">
            <summary>
            Provides methods for designers to access resource readers and writers for specific System.Globalization.CultureInfo resource types.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ResourceService.#ctor(System.ComponentModel.Design.IServiceContainer,Alternet.FormDesigner.WinForms.OpenStreamDelegate)">
            <summary>
            Initializes a new instance of the <c>ResourceService</c> class with specified settings.
            </summary>
            <param name="serviceContainer">Container for this new instance.</param>
            <param name="openStreamFunc">Method used to open stream.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ResourceService.Dispose">
            <summary>
            Disposes <c>ResourceService</c> object and releases all associated resources.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ResourceService.GetResourceReader(System.Globalization.CultureInfo)">
            <summary>
            Finds out an object used to read data from resource files.
            </summary>
            <param name="info"></param>
            <returns><c>IResourceReader</c> performs reading data functionality.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
            <summary>
            Finds out an object used to write data to resource files.
            </summary>
            <param name="info"></param>
            <returns><c>IResourceWriter</c> performs writing data functionality.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SampleSelectionItem.#ctor(Alternet.FormDesigner.WinForms.SelectionService,System.ComponentModel.Component)">
            Constructor
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.SampleSelectionItem.Primary">
            Determines if this is the primary selection.  The primary selection uses a
            different set of grab handles and generally supports sizing. The caller must
            verify that there is only one primary object; this merely updates the
            UI.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SampleSelectionItem.Dispose">
            Disposes of this selection.  We dispose of our region object if it still exists and we
            invalidate our UI so that we don't leave any turds laying around.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.SelectionService">
            This class keeps track of the selected component(s) and provides events
            to notify about selection changes.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#PrimarySelection">
            The primary selection is the last one to have been selected.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#SelectionCount">
            Return the number of components we have selected.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#GetComponentSelected(System.Object)">
            Check to see if the given component is in our selection group.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#GetSelectedComponents">
            Return our list of selected components.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#SetSelectedComponents(System.Collections.ICollection)">
            Select the given components.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.System#ComponentModel#Design#ISelectionService#SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
            Select the given components with the given SelectionType.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.Dispose">
            Disposes the entire selection manager.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.SetPrimarySelection(Alternet.FormDesigner.WinForms.SampleSelectionItem)">
            Sets the given selection object to be the primary selection.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.AddSelection(Alternet.FormDesigner.WinForms.SampleSelectionItem)">
            Adds the given selection to our selection list.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.DesignerHost_TransactionClosed(System.Object,System.ComponentModel.Design.DesignerTransactionCloseEventArgs)">
            Called by the designer host when it is entering or leaving a batch
            operation.  Here we queue up selection notification and we turn off
            our UI.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.DesignerHost_TransactionOpened(System.Object,System.EventArgs)">
            Called by the designer host when it is entering or leaving a batch
            operation.  Here we queue up selection notification and we turn off
            our UI.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.DesignerHost_ComponentAdd(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            Called by the formcore when someone has added a component.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.DesignerHost_ComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            Called when a component changes.  Here we look to see if the component is
            selected.  If it is, we notify STrackSelection that the selection has changed.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.DesignerHost_ComponentRemove(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            Called by the formcore when someone has removed a component.  This will
            remove any selection on the component without disturbing the rest of
            the selection.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.FlushSelectionChanges">
            Called when our visibility or batch mode changes.  Flushes
            any pending notifications or updates if possible.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.OnSelectionChanged">
            Called anytime the selection has changed.  We update our UI for the selection, and
            then we fire a change event.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.OnSelectionContentsChanged">
            This should be called when the selection has changed, or when just the contents of
            the selection has changed.  It updates the document manager's notion of selection.
            the selection have changed.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.SelectionService.RemoveSelection(Alternet.FormDesigner.WinForms.SampleSelectionItem)">
            Removes the given selection from our selection list
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.ToolboxService">
            The IToolboxService is responsible for communication between the designer
            and whatever implementation of a toolbox you have. This service can be
            its own class (as it is here) or it can be implemented on the actual
            toolbox control.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.#ctor(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Initializes a new instance of the <c>ToolboxService</c> class with specified host.
            </summary>
            <param name="host">The <c>IDesignerHost</c> managing designer transactions and components.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxService.CategoryNames">
            Our toolbox has categories akin to those of Visual Studio, but you
            could group them any which way. Just make sure your IToolboxService knows.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxService.SelectedCategory">
            If your toolbox is categorized, then it's good for others to know
            which category is selected.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxService.ToolboxControl">
            <summary>
            Gets or sets <c>IToolboxControl</c> which this service communicates with.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.String,System.ComponentModel.Design.IDesignerHost)">
            Add a ToolboxItem to our toolbox, in a specific category, bound to a certain host.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
            Add a ToolboxItem to our toolbox, bound to a certain host.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.DeserializeToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
            We deserialize a ToolboxItem when we drop it onto our design surface.
            The ToolboxItem comes packaged in a DataObject. We're just working
            with standard tools and one host, so the host parameter is ignored.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#DeserializeToolboxItem(System.Object)">
            We deserialize a ToolboxItem when we drop it onto our design surface.
            The ToolboxItem comes packaged in a DataObject.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.SerializeToolboxItem(System.Drawing.Design.ToolboxItem)">
            We serialize a toolbox by packaging it in a DataObject. Simple!
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
            Remove a ToolboxItem from the specified category in our toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem)">
            Remove a ToolboxItem from our toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.SetCursor">
            If we've got a tool selected, then perhaps we want to set our cursor to do
            something interesting when its over the design surface. If we do, then
            we do it here and return true. Otherwise we return false so the caller
            can set the cursor in some default manor.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
            Add a ToolboxItem to our toolbox under the specified category.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#AddToolboxItem(System.Drawing.Design.ToolboxItem)">
            Add a ToolboxItem to our toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String,System.ComponentModel.Design.IDesignerHost)">
            Add a creator that will convert non-standard tools in the specified format into ToolboxItems, to be associated with a host.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String)">
            Add a creator that will convert non-standard tools in the specified format into ToolboxItems.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.RemoveCreator(System.String,System.ComponentModel.Design.IDesignerHost)">
            Remove the creator for the specified format, associated with a particular host.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#RemoveCreator(System.String)">
            Remove the creator for the specified format.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.GetToolboxItems(System.String,System.ComponentModel.Design.IDesignerHost)">
            Get all the tools in a category.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#GetToolboxItems(System.String)">
            Get all of the tools.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#GetToolboxItems(System.ComponentModel.Design.IDesignerHost)">
            Get all of the tools. We're always using our current host though.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#GetToolboxItems">
            Get all of the tools.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.GetSelectedToolboxItem(System.ComponentModel.Design.IDesignerHost)">
            Return the selected ToolboxItem in our toolbox if it is associated with this host.
            Since all of our tools are associated with our only host, the host parameter
            is ignored.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#GetSelectedToolboxItem">
            Return the selected ToolboxItem in our toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem)">
            Set the selected ToolboxItem in our toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.Refresh">
            Refreshes the toolbox.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.IsSupported(System.Object,System.Collections.ICollection)">
            We are always using standard ToolboxItems, so they are always supported.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#IsSupported(System.Object,System.ComponentModel.Design.IDesignerHost)">
            We are always using standard ToolboxItems, so they are always supported.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.SelectedToolboxItemUsed">
            This gets called after our IToolboxUser (the designer) ToolPicked method is called.
            In our case, we select the pointer.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.IsToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
            Check if a serialized object is a ToolboxItem. In our case, all of our tools
            are standard and from a constant set, and they all extend ToolboxItem, so if
            we can deserialize it in our standard-way, then it is indeed a ToolboxItem.
            The host is ignored.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxService.System#Drawing#Design#IToolboxService#IsToolboxItem(System.Object)">
            Check if a serialized object is a ToolboxItem. In our case, all of our tools
            are standard and from a constant set, and they all extend ToolboxItem, so if
            we can deserialize it in our standard-way, then it is indeed a ToolboxItem.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.ToolboxControl">
            <summary>
            Displays and manipulates list of icons for components and controls that user can place onto design surface
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.#ctor">
            <summary>
            Initializes a new instance of the <c>ToolboxControl</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.ToolboxControl.PlaceItemAtDefaultLocation">
            <summary>
            Event which is fired when user double clicks on a toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.AutoFillWithStandardItems">
            <summary>
            Gets or sets a boolean value indicating whether ToolboxControl content should be automatically filled by the standard collection of the toolbox items.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.CategoryNames">
            <summary>
            Gets collection of Categories (Tabs) displayed by the toolbox.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.DesignerHost">
            <summary>
            Provides an interface for managing designer transactions and components.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.FormDesignerControl">
            <summary>
            Provides an interface to support all standard form editing operations with controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.Painter">
            <summary>
            Provides an interface to draw toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.SelectedCategory">
            <summary>
            Gets or sets currently selected toolbox category.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.SelectedTool">
            <summary>
            Returns currently selected toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.UseMetroIconsForStandardItems">
            <summary>
            Gets or sets a boolean value indicating whether ToolboxControl should draw standard items using internal icon's collection.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.ToolboxControl.HideContentsWhenNoFormDesignerIsSet">
            <summary>
            Gets or sets a boolean value indicates whether toolbox control should display it's content when <c>FormDesignerControl</c> is not set.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.ShouldSerializeSearchFilter">
            <summary>
            Indicates whether the <c>SearchFilter</c> property should be persisted.
            </summary>
            <returns>True if <c>SearchFilter</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.AddCategory(System.String)">
            <summary>
            Adds new category to the toolbox.
            </summary>
            <param name="categoryName">Category name to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.InsertCategory(System.Int32,System.String)">
            <summary>
            Inserts category in the specified position.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.AddItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Places toolbox item onto specified toolbox tab.
            </summary>
            <param name="categoryName">Tab name where new items will be placed.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.InsertItem(System.Int32,System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Inserts item in the specified position.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.AddItemForType(System.String,System.Type,Alternet.FormDesigner.WinForms.CustomToolboxImage)">
            <summary>
            Adds toolbox item from type name.
            </summary>
            <param name="categoryName">Tab name where new items will be placed.</param>
            <param name="type">Type to get items from.</param>
            <param name="customImage">Specifies Bitmap to draw with items.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.AddItemsFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Add all types that can appear on the toolbox from the assembly.
            </summary>
            <param name="categoryName">Tab name where new items will be placed.</param>
            <param name="assembly">Assembly to get items from.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.BeginInit">
            <summary>
            Signals the start of the ToolboxControl initialization.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.BeginUpdate">
            <summary>
            Prevents repainting of the toolbox until EndUpdate is called.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.ClearItemsInCategory(System.String)">
            <summary>
            Clears items in the specified tab.
            </summary>
            <param name="categoryName">Name of tab for clearing.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.DoesCategoryExist(System.String)">
            <summary>
            Identifies whether given category exist in the ToolboxControl.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.DoesItemExist(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Identifies whether given item exist in the specified tab.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <param name="item">ToolboxItem to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.DoesItemExist(System.String,System.String)">
            <summary>
            Identifies whether given item exist in the specified tab.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <param name="itemName">Item name to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.EndInit">
            <summary>
            Signals the end of the ToolboxControl initialization.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.EndUpdate">
            <summary>
            Re-enables toolbox repainting.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.FillWithStandardItems(System.Boolean)">
            <summary>
            Fills ToolboxControl with standard items.
            </summary>
            <param name="useMetroIcons">Specifies whether internal icon collection should be used to draw these items.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.GetAllTools">
            <summary>
            Gets all toolbox items.
            </summary>
            <returns>Collection of toolbox items stored in the IToolboxControl.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.GetToolsFromCategory(System.String)">
            <summary>
            Gets toolbox items on the specified tab.
            </summary>
            <param name="category">Name of tab to get items from.</param>
            <returns>Collection of toolbox items displayed on the specified tab.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.IsCategoryCollapsed(System.String)">
            <summary>
            Indicates whether specified category is in the collapsed state.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <returns>True if tab is collapsed; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Alternet#FormDesigner#WinForms#Toolbox#IToolboxContentControlSite#OnContentPreferredSizeChanged(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Adjusts the specified child control into view on an auto-scroll enabled control.
            </summary>
            <param name="controlToScrollTo">The child control to adjust.</param>
            <param name="scrollToVerticalOffset">Vertical offset.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Alternet#FormDesigner#WinForms#Toolbox#IToolboxContentControlSite#PlaceItemAtDefaultLocation(System.Drawing.Design.ToolboxItem)">
            <summary>
            Forces designer instance to select the specified item.
            </summary>
            <param name="item">The ToolboxItem to select.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.RemoveCategory(System.String)">
            <summary>
            Removes specified tab.
            </summary>
            <param name="categoryName">Name of tab to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.RemoveItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Removes toolbox item from the category.
            </summary>
            <param name="categoryName">Name of tab from which specific item should be removed.</param>
            <param name="item">ToolboxItem to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.SelectPointer">
            <summary>
            Deselects currently selected toolbox item and selects pointer tool.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Alternet#FormDesigner#WinForms#Toolbox#IToolboxContentControlSite#SerializeItemForDragAndDrop(System.Drawing.Design.ToolboxItem)">
            <summary>
            Gets a serializable object for drag and drop operations that represents the specified toolbox item.
            </summary>
            <param name="item">ToolboxItem to serialize.</param>
            <returns>Serializable DataObject.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.SetCategoryCollapsed(System.String,System.Boolean)">
            <summary>
            Sets specified collapsed state to the given category.
            </summary>
            <param name="categoryName">Name of tab to expand or collapse.</param>
            <param name="collapsed">Collapsed state to set.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.SetSelectedItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Selects toolbox item.
            </summary>
            <param name="categoryName">Name of tab where item should be selected.</param>
            <param name="item">ToolboxItem to select.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.RenameCategory(System.String,System.String)">
            <summary>
            Renames the specified category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.MoveItem(System.String,System.Drawing.Design.ToolboxItem,System.Int32)">
            <summary>
            Moves item to its current position plus value specified by positionDifference parameter.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.MoveCategory(System.String,System.Int32)">
            <summary>
            Moves category to its current position plus value specified by positionDifference parameter.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.ScrollToCategory(System.String)">
            <summary>
            Scrolls toolbox control to the specified category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.ScrollToItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            Scrolls toolbox control to the specified item.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Reset">
            <summary>
            Resets the toolbox content to defaults.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.RemoveAllCategories">
            <summary>
            Removes all categories from the toolbox control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Save(System.IO.Stream)">
            <summary>
            Saves the toolbox content to the specified stream.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.ToolboxControl.Load(System.IO.Stream)">
            <summary>
            Loads the toolbox content from the specified stream.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.TypeResolutionService">
            The ITypeResolutionService is used to load types at design time. It keeps an internal
            set of assemblies that have been referenced thus far and can search them for types given
            unqualified names.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.#ctor(Alternet.FormDesigner.WinForms.IDesignedComponentAssemblyProvider)">
            <summary>
            Initializes a new instance of the <c>TypeResolutionService</c> class with default settings.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.TypeResolutionService.ReferencedAssemblies">
            We use this property to help us generate code and compile.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
            Add an assembly to our internal set.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
            Search our internal set of assemblies for one with this AssemblyName.
            If it cannot be located and throwOnError is true, throw an exception.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.System#ComponentModel#Design#ITypeResolutionService#GetAssembly(System.Reflection.AssemblyName)">
            Search our internal set of assemblies for one with this AssemblyName.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
            Find a type based on a name that may or may not be fully qualified.
            If the type cannot be found and throwOnError is true, throw an Exception.
            Searching should ignore case based on ignoreCase's value.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.System#ComponentModel#Design#ITypeResolutionService#GetType(System.String,System.Boolean)">
            Find a type based on a name that may or may not be fully qualified.
            If the type cannot be found and throwOnError is true, throw an Exception.
            Do not ignore case while searching.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.System#ComponentModel#Design#ITypeResolutionService#GetType(System.String)">
            Find a type based on a name that may or may not be fully qualified.
            Do not ignore case while searching.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.TypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
            Return the path to the file which the given assembly was loaded.
            If that assembly has not been loaded, this returns null.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.DesignerSerializationManager">
            Our implementation of IDesignerSerializationManager. This is a private
            implementation and we only have one.  So, it could have been implemented
            as a private interface implementation on top of the loader class
            itself.  I decided against this because there is a lot of
            state associated with the serialization manager and it could get
            confusing.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.#ctor(Alternet.FormDesigner.WinForms.FormDesignerLoader)">
            Initializes the serialization manager.
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName">
            ResolveName event.  This event
            is raised when GetName is called, but the name is not found
            in the serialization manager's name table.  It provides a
            way for a serializer to demand-create an object so the serializer
            does not have to order object creation by dependency.  This
            delegate is cleared immediately after serialization or deserialization
            is complete.
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete">
            This event is raised when serialization or deserialization
            has been completed.  Generally, serialization code should
            be written to be stateless.  Should some sort of state
            be necessary to maintain, a serializer can listen to
            this event to know when that state should be cleared.
            An example of this is if a serializer needs to write
            to another file, such as a resource file.  In this case
            it would be inefficient to design the serializer
            to close the file when finished because serialization of
            an object graph generally requires several _serializers.
            The resource file would be opened and closed many times.
            Instead, the resource file could be accessed through
            an object that listened to the SerializationComplete
            event, and that object could close the resource file
            at the end of serialization.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context">
            The Context property provides a user-defined storage area
            implemented as a stack.  This storage area is a useful way
            to provide communication across serializers, as serialization
            is a generally hierarchical process.
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties">
            The Properties property provides a set of custom properties
            the serialization manager may surface.  The set of properties
            exposed here is defined by the implementor of
            IDesignerSerializationManager.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
            This method adds a custom serialization provider to the
            serialization manager.  A custom serialization provider will
            get the opportunity to return a serializer for a data type
            before the serialization manager looks in the type's
            metadata.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
            Creates an instance of the given type and adds it to a collection
            of named instances.  Objects that implement IComponent will be
            added to the design time container if addToContainer is true.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)">
            Retrieves an instance of a created object of the given name, or
            null if that object does not exist.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)">
            Retrieves a name for the specified object, or null if the object
            has no name.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)">
            Retrieves a serializer of the requested type for the given
            object type.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)">
            Retrieves a type of the given name.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
            Removes a previously added serialization provider.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)">
            Reports a non-fatal error in serialization.  The serialization
            manager may implement a logging scheme to alert the caller
            to all non-fatal errors at once.  If it doesn't, it should
            immediately throw in this method, which should abort
            serialization.
            Serialization may continue after calling this function.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)">
            Provides a way to set the name of an existing object.
            This is useful when it is necessary to create an
            instance of an object without going through CreateInstance.
            An exception will be thrown if you try to rename an existing
            object or if you try to give a new object a name that
            is already taken.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)">
            Retrieves the requested service.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.AddErrors(System.Collections.ICollection)">
            This method is called by dependent loads to add additional
            errors to the error list.  It is not called for the last
            dependent load, nor is it called if IDesignerLoaderService
            is not implemented.  If outside parties want to implement
            IDesignerLoaderService, they may, but they will have
            to provide their own storage for the dependent
            error list.  We are just re-using _errorList here to be
            efficient.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.Initialize">
            This starts the loading process.  Normally, everything
            should be cleared out when this is called.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.DesignerSerializationManager.Terminate(System.Collections.ICollection)">
            This ends the loading process.  This resets the state
            of the serialization manager and merges the provided
            error collection into the manager's own error list and
            returns the merged list.
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerLoader">
             This is a designer loader that is based on XML.  We use reflection
             to write out values into an XML document.  The techniques used in this
             designer loader to discover, via reflection, the properties and
             objects that need to be saved or loaded can be applied to any
             persistence format.
            
             The XML format we use here is not terribly user-friendly, but
             is fairly straightforward.  It handles the vast majority of
             persistence requirements including collections, instance descriptors,
             and binary data.
            
             In addition to maintaining the buffer in the form of an XmlDocument,
             we also maintain it in a CodeCompileUnit. We use this DOM to generate
             C# and VB code, as well as to compile the buffer into an executable.
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerLoader.#ctor(System.ComponentModel.Design.IServiceContainer,Alternet.FormDesigner.WinForms.DesignerReferencedAssemblies,Alternet.FormDesigner.WinForms.DesignerImportedNamespaces,System.Collections.Generic.IEnumerable{Alternet.FormDesigner.WinForms.DesignerAssemblyResources},Alternet.FormDesigner.WinForms.OpenStreamForReadingDelegate,Alternet.FormDesigner.WinForms.OpenStreamDelegate,System.Action,System.String,System.String,Alternet.FormDesigner.WinForms.IDesignedComponentAssemblyProvider)">
            <summary>
            Initializes a new instance of the <c>FormDesignerLoader</c> class with specified settings.
            </summary>
            <param name="serviceContainer"><c>System.ComponentModel.Design.IServiceContainer</c> associated with this new instance.</param>
            <param name="referencedAssemblies">Collection of assemblies that can be referenced in the form designer's content.</param>
            <param name="importedNamespaces">Collection of namespaces for the designer control.</param>
            <param name="assemblyResources">Collection of assembly resources for the designer control.</param>
            <param name="openUserCodeStreamFunc">Method that will handle opening user-defined code.</param>
            <param name="openDesignerCodeStreamFunc">Method that will handle opening form designer-generated code.</param>
            <param name="reloadFunc">Action used to force reload designer content.</param>
            <param name="userCodeFileName">Name of file contains user-defined code.</param>
            <param name="designerCodeFileName">Name of file contains designer-generated code.</param>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerLoader.IsModified">
            <summary>
            Represents a boolean value indicating whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerLoader.Loader">
            <summary>
            Represents an object used to load designer's content.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerLoader.LoaderHost">
            <summary>
            Gets the loader host.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerLoader.Save(System.Text.StringBuilder)">
            <summary>
            Saves designer's content into the specified target.
            </summary>
            <param name="target">Destination where content should be saved.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerLoader.Save">
            <summary>
            Saves designer's content.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.FormDesignerControl">
            <summary>
            Represents a control supports all standard form editing operations with controls.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerControl.#ctor">
            <summary>
            Initializes a new instance of the <c>FormDesignerControl</c> class with default settings.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.CommandStateChanged">
            <summary>
            Occurs when state of designer commands changes (for example when undo stack becomes available).
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ShowPropertiesRequested">
            <summary>
            Occurs when user request to open Property Window.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ViewCodeRequested">
            <summary>
            Occurs when user request to view designer source code.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.CompilerErrorClick">
            <summary>
            Occurs when user clicks on compiler error on Form Designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.DesignedContentChanged">
            <summary>
            Occurs when user modifies any aspect of the control being designed.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.DesignerHostChanged">
            <summary>
            Occurs when designer host changes, for example if new form is loaded.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ComponentChanged">
            <summary>
            Occurs when some component was changed on the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ComponentAdding">
            <summary>
            Occurs when some component is being added on the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ComponentAdded">
            <summary>
            Occurs when some component was added on the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.ComponentRemoved">
            <summary>
            Occurs when some component was removed from the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.DesignSurfaceKeyDown">
            <summary>
            Occurs when user presses a key when design surface is focused.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.LoadingErrorOccured">
            <summary>
            Occurs when there is a parse error of the design code during loading.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.NavigateToUserMethodRequested">
            <summary>
            Occurs when form designer is requested to navigate to the event handler.
            For example, when user double clicks on the control.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.FormDesignerControl.SelectionChanged">
            <summary>
            Occurs when user selects different control in the designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.Options">
            <summary>
            Gets designer options like snap settings, grid size etc.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.AutoSaveToSource">
            <summary>
            Gets or sets a boolean value indicating whether designer should automatically translate changes to the source upon every change.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.AutoAddComponentAssemblyReferences">
            <summary>
            Gets or sets a boolean value indicating whether designer should automatically try to add assembly references after a control is added.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.DesignerCommands">
            <summary>
            Represents a collection of standard designer commands like selecting, copying, pasting, moving and resizing controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.DesignerHost">
            <summary>
            Provides an interface for managing designer transactions and components.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.ImportedNamespaces">
            <summary>
            In case of Visual Basic, gets collection of globally available namespaces.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.UserData">
            <summary>
            Gets or sets user-specific data associated with this Form Designer
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.IsModified">
            <summary>
            Represents a value indicates whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.IsBeingLoaded">
            <summary>
            When implemented by a class, gets a boolean value indicating that designer is currently being loaded.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.IsSmartDiffCodeSerializationRequired">
            <summary>
            Gets or sets method used to identify whether <c>FormDesignerControl</c> content should be saved only by taking into account code difference.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.PrimarySelection">
            <summary>
            Gets first selected component or control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.ReferencedAssemblies">
            <summary>
            Gets collection of assemblies where the controls and components used on the form being designed are declared.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.SelectedComponents">
            <summary>
            Contains list of selected components or controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.ServiceContainer">
            <summary>
            Represents a container for designer-related services.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.Source">
            <summary>
            Gets or sets FormDesigner Source.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.ToolboxControl">
            <summary>
            Gets or sets toolbox control associated with the designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.FormDesignerControl.CommandKeyBindings">
            <summary>
            Represents a list of <c>CommandKeyBinding</c> accepted by this <c>FormDesignerControl</c>.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerControl.GetLocalizationLanguage">
            <summary>
            Gets current culture information
            </summary>
            <returns>Current culture info</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerControl.SetLocalizationLanguage(System.Globalization.CultureInfo)">
            <summary>
            Sets current culture information
            </summary>
            <param name="language">Culture information to set.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerControl.Reload">
            <summary>
            Reloads form to be designed from the source.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.FormDesignerControl.Save">
            <summary>
            Serializes designer to C# or Visual Basic file.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IEventBindingServiceExtended">
            <summary>
            Provides an additional service for registering event handlers for component events.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IToolboxServiceExtended">
            <summary>
            Provides additional properties to manage and query the toolbox in the development environment.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IToolboxServiceExtended.ToolboxControl">
            <summary>
            When implemented by a class, gets or sets <c>IToolboxControl</c> which this service communicates with.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IResourceServiceExtended">
            <summary>
            Provides an additional interface for designers to access resource readers and writers for specific System.Globalization.CultureInfo resource types.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerHostContext">
            <summary>
            Represents methods and properties declaration to encapsulate designer host together with the actual form designer control and its state.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.DesignerControl">
            <summary>
            When implemented by a class, represents the view for the root designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.DesignerHost">
            <summary>
            When implemented by a class, represents <c>IDesignerHost</c> object encapsulated in this host.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.Owner">
            <summary>
            When implemented by a class, represents an actual form designer control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.PrimarySelection">
            <summary>
            When implemented by a class, represents first selected component or control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.SelectedComponents">
            <summary>
            When implemented by a class, represents list of selected components or controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.ServiceContainer">
            <summary>
            When implemented by a class, represents a container for designer-related services.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.Source">
            <summary>
            When implemented by a class, represents data source of the designer control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.ToolboxService">
            <summary>
            When implemented by a class, represents an object provides communication between the designer and toolbox.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.DesignerLoader">
            <summary>
            When implemented by a class, represents an object provides load and save designer's content functionality.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerHostContext.Save">
            <summary>
            When implemented by a class, saves designer's content.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerCommands">
            <summary>
            Represents the set of commands that are available to the Form Designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.IsLockControlsChecked">
            <summary>
            When implemented by a class, indicates whether all controls on designer surface is locked.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignBottom">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned to the bottom of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyMoveDown">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be moved down by key.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyMoveUp">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be moved up by key.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyMoveLeft">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be moved left by key.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyMoveRight">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be moved right by key.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeDown">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge down key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeUp">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge up key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeLeft">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge left key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeRight">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge right key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySizeWidthDecrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the size width decrease key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySizeWidthIncrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the size width increase key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySizeHeightDecrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the size height decrease key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySizeHeightIncrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the size height increase key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeWidthDecrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge width decrease key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeWidthIncrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge width increase key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeHeightDecrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge height decrease key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyNudgeHeightIncrease">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be accessed to the nudge height increase key handler.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignHorizontalCenters">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned horizontally to the center of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignLeft">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned to the left edge of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignRight">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned to the right edge of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignToGrid">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned to the closest grid.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignTop">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned to the top of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanAlignVerticalCenters">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be aligned vertically to the center of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanArrangeBottom">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be arranged along the bottom of a form.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanArrangeIcons">
            <summary>
            When implemented by a class, indicates whether ArrangeIcons command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanArrangeRight">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be arranged along the right edge of a form.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanBringForward">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be bring forward in the z-order.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanBringToFront">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be bring to the front of the z-order.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanCenterHorizontally">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be centered horizontally of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanCenterVertically">
            <summary>
            When implemented by a class, gets a value indicating whether selected controls can be centered vertically of its containing control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanCopy">
            <summary>
            When implemented by a class, indicates whether selected controls can be copied.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanCut">
            <summary>
            When implemented by a class, indicates whether selected controls can be cut.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanDelete">
            <summary>
            When implemented by a class, indicates whether selected controls can be deleted.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanDocumentOutline">
            <summary>
            When implemented by a class, indicates whether DocumentOutline command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanF1Help">
            <summary>
            When implemented by a class, indicates whether F1Help command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanGroup">
            <summary>
            When implemented by a class, indicates whether Group command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanHorizSpaceConcatenate">
            <summary>
            When implemented by a class, indicates whether HorizSpaceConcatenate command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanHorizSpaceDecrease">
            <summary>
            When implemented by a class, indicates whether HorizSpaceDecrease command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanHorizSpaceIncrease">
            <summary>
            When implemented by a class, indicates whether HorizSpaceIncrease command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanHorizSpaceMakeEqual">
            <summary>
            When implemented by a class, indicates whether HorizSpaceMakeEqual command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanLineupIcons">
            <summary>
            When implemented by a class, indicates whether LineupIcons command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanLockControls">
            <summary>
            When implemented by a class, indicates whether LockControls command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanMultiLevelRedo">
            <summary>
            When implemented by a class, indicates whether MultiLevelRedo command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanMultiLevelUndo">
            <summary>
            When implemented by a class, indicates whether HorizSpaceDecrease command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanPaste">
            <summary>
            When implemented by a class, indicates whether Paste command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanProperties">
            <summary>
            When implemented by a class, indicates whether Properties command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanPropertiesWindow">
            <summary>
            When implemented by a class, indicates whether PropertiesWindow command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanRedo">
            <summary>
            When implemented by a class, indicates whether Redo command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanReplace">
            <summary>
            When implemented by a class, indicates whether Replace command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSelectAll">
            <summary>
            When implemented by a class, indicates whether SelectAll command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSendBackward">
            <summary>
            When implemented by a class, indicates whether SendBackward command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSendToBack">
            <summary>
            When implemented by a class, indicates whether SendToBack command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanShowGrid">
            <summary>
            When implemented by a class, indicates whether ShowGrid command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanShowLargeIcons">
            <summary>
            When implemented by a class, indicates whether ShowLargeIcons command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSizeToControl">
            <summary>
            When implemented by a class, indicates whether SizeToControl command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSizeToControlHeight">
            <summary>
            When implemented by a class, indicates whether SizeToControlHeight command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSizeToControlWidth">
            <summary>
            When implemented by a class, indicates whether SizeToControlWidth command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSizeToFit">
            <summary>
            When implemented by a class, indicates whether SizeToFit command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSizeToGrid">
            <summary>
            When implemented by a class, indicates whether SizeToGrid command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanSnapToGrid">
            <summary>
            When implemented by a class, indicates whether SnapToGrid command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanTabOrder">
            <summary>
            When implemented by a class, indicates whether TabOrder command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanUndo">
            <summary>
            When implemented by a class, indicates whether Undo command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanUngroup">
            <summary>
            When implemented by a class, indicates whether Ungroup command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVerbFirst">
            <summary>
            When implemented by a class, indicates whether VerbFirst command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVerbLast">
            <summary>
            When implemented by a class, indicates whether VerbLast command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVertSpaceConcatenate">
            <summary>
            When implemented by a class, indicates whether VertSpaceConcatenate command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVertSpaceDecrease">
            <summary>
            When implemented by a class, indicates whether VertSpaceDecrease command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVertSpaceIncrease">
            <summary>
            When implemented by a class, indicates whether VertSpaceIncrease command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanVertSpaceMakeEqual">
            <summary>
            When implemented by a class, indicates whether VertSpaceMakeEqual command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanViewCode">
            <summary>
            When implemented by a class, indicates whether ViewCode command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanViewGrid">
            <summary>
            When implemented by a class, indicates whether ViewGrid command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyDefaultAction">
            <summary>
            When implemented by a class, indicates whether <c>KeyDefaultAction</c> command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeyCancel">
            <summary>
            When implemented by a class, indicates whether <c>KeyCancel</c> command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySelectNext">
            <summary>
            When implemented by a class, indicates whether <c>KeySelectNext</c> command can be executed.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CanKeySelectPrevious">
            <summary>
            When implemented by a class, indicates whether <c>KeySelectPrevious</c> command can be executed.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignBottom">
            <summary>
            When implemented by a class, aligns selected control to the bottom of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignHorizontalCenters">
            <summary>
            When implemented by a class, aligns selected control horizontally to the center of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignLeft">
            <summary>
            When implemented by a class, aligns selected control to the left edge of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignRight">
            <summary>
            When implemented by a class, aligns selected control to the right edge of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignToGrid">
            <summary>
            When implemented by a class, aligns selected control to the closest grid.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignTop">
            <summary>
            When implemented by a class, aligns selected control to the top of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.AlignVerticalCenters">
            <summary>
            When implemented by a class, aligns selected control vertically to the center of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ArrangeBottom">
            <summary>
            When implemented by a class, arranges selected control along the bottom of a form.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ArrangeIcons">
            <summary>
            When implemented by a class, executes ArrangeIcons command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ArrangeRight">
            <summary>
            When implemented by a class, arranges selected control along the right edge of a form.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.BringForward">
            <summary>
            When implemented by a class, bring forward selected control in the z-order.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.BringToFront">
            <summary>
            When implemented by a class, bring selected control to the front of the z-order.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CenterHorizontally">
            <summary>
            When implemented by a class, center selected control horizontally of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.CenterVertically">
            <summary>
            When implemented by a class, center selected control vertically of its containing control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Copy">
            <summary>
            When implemented by a class, copies selected control content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Cut">
            <summary>
            When implemented by a class, cuts selected control content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Delete">
            <summary>
            When implemented by a class, deletes selected control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.DocumentOutline">
            <summary>
            When implemented by a class, executes DocumentOutline command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.F1Help">
            <summary>
            When implemented by a class, executes F1Help command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Group">
            <summary>
            When implemented by a class, executes Group command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.HorizSpaceConcatenate">
            <summary>
            When implemented by a class, executes HorizSpaceConcatenate command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.HorizSpaceDecrease">
            <summary>
            When implemented by a class, executes HorizSpaceDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.HorizSpaceIncrease">
            <summary>
            When implemented by a class, executes HorizSpaceIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.HorizSpaceMakeEqual">
            <summary>
            When implemented by a class, executes HorizSpaceMakeEqual command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.LineupIcons">
            <summary>
            When implemented by a class, executes LineupIcons command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.LockControls">
            <summary>
            When implemented by a class, executes LockControls command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.MultiLevelRedo">
            <summary>
            When implemented by a class, executes MultiLevelRedo command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.MultiLevelUndo">
            <summary>
            When implemented by a class, executes MultiLevelUndo command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Paste">
            <summary>
            When implemented by a class, executes Paste command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Properties">
            <summary>
            When implemented by a class, executes Properties command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.PropertiesWindow">
            <summary>
            When implemented by a class, executes PropertiesWindow command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Redo">
            <summary>
            When implemented by a class, executes Redo command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Replace">
            <summary>
            When implemented by a class, executes Replace command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SelectAll">
            <summary>
            When implemented by a class, executes SelectAll command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SendBackward">
            <summary>
            When implemented by a class, executes SendBackward command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SendToBack">
            <summary>
            When implemented by a class, executes SendToBack command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ShowGrid">
            <summary>
            When implemented by a class, executes ShowGrid command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ShowLargeIcons">
            <summary>
            When implemented by a class, executes ShowLargeIcons command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SizeToControl">
            <summary>
            When implemented by a class, executes SizeToControl command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SizeToControlHeight">
            <summary>
            When implemented by a class, executes SizeToControlHeight command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SizeToControlWidth">
            <summary>
            When implemented by a class, executes SizeToControlWidth command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SizeToFit">
            <summary>
            When implemented by a class, executes SizeToFit command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SizeToGrid">
            <summary>
            When implemented by a class, executes SizeToGrid command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.SnapToGrid">
            <summary>
            When implemented by a class, executes SnapToGrid command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.TabOrder">
            <summary>
            When implemented by a class, executes TabOrder command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Undo">
            <summary>
            When implemented by a class, executes Undo command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.Ungroup">
            <summary>
            When implemented by a class, executes Ungroup command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VerbFirst">
            <summary>
            When implemented by a class, executes VerbFirst command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VerbLast">
            <summary>
            When implemented by a class, executes VerbLast command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VertSpaceConcatenate">
            <summary>
            When implemented by a class, executes VertSpaceConcatenate command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VertSpaceDecrease">
            <summary>
            When implemented by a class, executes VertSpaceDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VertSpaceIncrease">
            <summary>
            When implemented by a class, executes VertSpaceIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.VertSpaceMakeEqual">
            <summary>
            When implemented by a class, executes VertSpaceMakeEqual command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ViewCode">
            <summary>
            When implemented by a class, executes ViewCode command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.ViewGrid">
            <summary>
            When implemented by a class, executes ViewGrid command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyMoveDown">
            <summary>
            When implemented by a class, executes KeyMoveDown command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyMoveUp">
            <summary>
            When implemented by a class, executes KeyMoveUp command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyMoveLeft">
            <summary>
            When implemented by a class, executes KeyMoveLeft command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyMoveRight">
            <summary>
            When implemented by a class, executes KeyMoveRight command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeDown">
            <summary>
            When implemented by a class, executes KeyNudgeDown command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeUp">
            <summary>
            When implemented by a class, executes KeyNudgeUp command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeLeft">
            <summary>
            When implemented by a class, executes KeyNudgeLeft command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeRight">
            <summary>
            When implemented by a class, executes KeyNudgeRight command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySizeWidthDecrease">
            <summary>
            When implemented by a class, executes KeySizeWidthDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySizeWidthIncrease">
            <summary>
            When implemented by a class, executes KeySizeWidthIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySizeHeightDecrease">
            <summary>
            When implemented by a class, executes KeySizeHeightDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySizeHeightIncrease">
            <summary>
            When implemented by a class, executes KeySizeHeightIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeWidthDecrease">
            <summary>
            When implemented by a class, executes KeyNudgeWidthDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeWidthIncrease">
            <summary>
            When implemented by a class, executes KeyNudgeWidthIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeHeightDecrease">
            <summary>
            When implemented by a class, executes KeyNudgeHeightDecrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyNudgeHeightIncrease">
            <summary>
            When implemented by a class, executes KeyNudgeHeightIncrease command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyDefaultAction">
            <summary>
            When implemented by a class, executes KeyDefaultAction command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeyCancel">
            <summary>
            When implemented by a class, executes KeyCancel command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySelectNext">
            <summary>
            When implemented by a class, executes KeySelectNext command.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerCommands.KeySelectPrevious">
            <summary>
            When implemented by a class, executes KeySelectPrevious command.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerLoader">
            <summary>
            Represents methods and properties declaration to load and save designer's content.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerLoader.IsModified">
            <summary>
            When implemented by a class, represents a boolean value indicating whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerLoader.Loader">
            <summary>
            When implemented by a class, represents an object used to load designer's content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerLoader.Save">
            <summary>
            When implemented by a class, saves designer's content.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerLoader.Save(System.Text.StringBuilder)">
            <summary>
            When implemented by a class, saves designer's content into the specified target.
            </summary>
            <param name="target">Destination where content should be saved.</param>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IPropertyGridControl">
            <summary>
            Provides a user interface for browsing the properties and methods of an object.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IPropertyGridControl.SelectedObjects">
            <summary>
            When implemented by a class, gets or sets the currently selected objects.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IPropertyGridControl.FormDesignerControl">
            <summary>
            When implemented by a class, gets or sets an <c>IFormDesignerControl</c> related to this property grid.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IToolboxControl">
            <summary>
            Represents properties and methods to display and manipulate list of icons for components and controls that user can place onto design surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IToolboxControl.PlaceItemAtDefaultLocation">
            <summary>
            When implemented by a class, event which is fired when user double clicks on a toolbox item.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IToolboxControl.CategoryNames">
            <summary>
            When implemented by a class, gets collection of Categories (Tabs) displayed by the toolbox
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IToolboxControl.SelectedCategory">
            <summary>
            When implemented by a class, gets or sets currently selected toolbox category.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IToolboxControl.SelectedTool">
            <summary>
            When implemented by a class, returns currently selected toolbox item.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.AddCategory(System.String)">
            <summary>
            When implemented by a class, adds new category to the toolbox.
            </summary>
            <param name="categoryName">Category name to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.AddItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, places toolbox item onto specified toolbox tab.
            </summary>
            <param name="categoryName">Tab name where new item will be placed.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.ClearItemsInCategory(System.String)">
            <summary>
            When implemented by a class, clears items in the specified tab.
            </summary>
            <param name="categoryName">Name of tab for clearing.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.DoesCategoryExist(System.String)">
            <summary>
            When implemented by a class, identifies whether given category exist in the IToolboxControl.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.DoesItemExist(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, identifies whether given item exist in the specified tab.
            </summary>
            <param name="categoryName">Name of tab to check.</param>
            <param name="item">ToolboxItem to check.</param>
            <returns>True if exists; otherwise false.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.GetAllTools">
            <summary>
            When implemented by a class, gets all toolbox items.
            </summary>
            <returns>Collection of toolbox items stored in the IToolboxControl.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.GetToolsFromCategory(System.String)">
            <summary>
            When implemented by a class, gets toolbox items on the specified tab.
            </summary>
            <param name="category">Name of tab to get items from.</param>
            <returns>Collection of toolbox items displayed on the specified tab.</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.Refresh">
            <summary>
            When implemented by a class, forces the IToolboxControl to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.RemoveCategory(System.String)">
            <summary>
            When implemented by a class, removes specified tab.
            </summary>
            <param name="categoryName">Name of tab to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.RemoveItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, removes toolbox item from the category.
            </summary>
            <param name="categoryName">Name of tab from which specific item should be removed.</param>
            <param name="item">ToolboxItem to remove.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.SelectPointer">
            <summary>
            When implemented by a class, deselects currently selected toolbox item and selects pointer tool.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.SetSelectedItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, selects toolbox item.
            </summary>
            <param name="categoryName">Name of tab where item should be selected.</param>
            <param name="item">ToolboxItem to select.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.AddItemForType(System.String,System.Type,Alternet.FormDesigner.WinForms.CustomToolboxImage)">
            <summary>
            When implemented by a class, adds toolbox item from type name.
            </summary>
            <param name="categoryName">Tab name where new items will be placed.</param>
            <param name="type">Type to get items from.</param>
            <param name="customImage">Specifies Bitmap to draw with items.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.AddItemsFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            When implemented by a class, add all types that can appear on the toolbox from the assembly.
            </summary>
            <param name="categoryName">Tab name where new items will be placed.</param>
            <param name="assembly">Assembly to get items from.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.BeginUpdate">
            <summary>
            When implemented by a class, prevents repainting of the toolbox until EndUpdate is called.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.EndUpdate">
            <summary>
            When implemented by a class, re-enables toolbox repainting.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.RenameCategory(System.String,System.String)">
            <summary>
            When implemented by a class, renames the specified category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.InsertItem(System.Int32,System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, inserts item in the specified position.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.InsertCategory(System.Int32,System.String)">
            <summary>
            When implemented by a class, inserts category in the specified position.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.MoveItem(System.String,System.Drawing.Design.ToolboxItem,System.Int32)">
            <summary>
            When implemented by a class, moves item to its current position plus value specified by positionDifference parameter.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.MoveCategory(System.String,System.Int32)">
            <summary>
            When implemented by a class, moves category to its current position plus value specified by positionDifference parameter.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.ScrollToCategory(System.String)">
            <summary>
            When implemented by a class, scrolls toolbox control to the specified category.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.Reset">
            <summary>
            When implemented by a class, resets the toolbox content to defaults.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.RemoveAllCategories">
            <summary>
            When implemented by a class, removes all categories from the toolbox control.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.Save(System.IO.Stream)">
            <summary>
            When implemented by a class, saves the toolbox content to the specified stream.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.Load(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the toolbox content from the specified stream.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IToolboxControl.ScrollToItem(System.String,System.Drawing.Design.ToolboxItem)">
            <summary>
            When implemented by a class, scrolls toolbox control to the specified item.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.IFormDesignerControl">
            <summary>
            Represents a properties and methods to support all standard form editing operations with controls.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.DesignerHostChanged">
            <summary>
            When implemented by a class, occurs when designer host changes, for example if new form is loaded.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.NavigateToUserMethodRequested">
            <summary>
            When implemented by a class, occurs when form designer is requested to navigate to the event handler.
            For example, when user double clicks on the control.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.SelectionChanged">
            <summary>
            When implemented by a class, occurs when user selects different control in the designer.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.CommandStateChanged">
            <summary>
            When implemented by a class, occurs when state of designer commands changes (for example when undo stack becomes available).
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.DesignedContentChanged">
            <summary>
            When implemented by a class, occurs when user modifies any aspect of the control being designed.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.LoadingErrorOccured">
            <summary>
            When implemented by a class, occurs when there is a parse error of the design code during loading.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.ComponentChanged">
            <summary>
            Occurs when some component was changed on the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.ComponentAdded">
            <summary>
            When implemented by a class, occurs when some component was added on the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.ComponentRemoved">
            <summary>
            When implemented by a class, occurs when some component was removed from the designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.CompilerErrorClick">
            <summary>
            When implemented by a class, occurs when user clicks on compiler error on Form Designer surface.
            </summary>
        </member>
        <member name="E:Alternet.FormDesigner.WinForms.IFormDesignerControl.DesignSurfaceKeyDown">
            <summary>
            When implemented by a class, occurs when user presses a key when design surface is focused.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.CommandKeyBindings">
            <summary>
            When implemented by a class, represents a list of <c>CommandKeyBinding</c> accepted by this <c>FormDesignerControl</c>.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.IsSmartDiffCodeSerializationRequired">
            <summary>
            When implemented by a class, gets or sets method used to identify whether <c>FormDesignerControl</c> content should be saved only by taking into account code difference.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.DesignerCommands">
            <summary>
            When implemented by a class, represents a collection of standard designer commands like selecting, copying, pasting, moving and resizing controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.DesignerHost">
            <summary>
            When implemented by a class, provides an interface for managing designer transactions and components..
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.IsModified">
            <summary>
            When implemented by a class, represents a value indicates whether designer content has been modified since last save.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.IsBeingLoaded">
            <summary>
            When implemented by a class, gets a boolean value indicating that designer is currently being loaded.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.AutoSaveToSource">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether designer should automatically translate changes to the source upon every change.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.AutoAddComponentAssemblyReferences">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether designer should automatically try to add assembly references after a control is added.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.PrimarySelection">
            <summary>
            When implemented by a class, gets first selected component or control.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.Options">
            <summary>
            When implemented by a class, gets designer options like snap settings, grid size etc.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.SelectedComponents">
            <summary>
            When implemented by a class, contains list of selected components or controls.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.ServiceContainer">
            <summary>
            When implemented by a class, represents a container for designer-related services.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.Source">
            <summary>
            When implemented by a class, gets or sets FormDesigner Source.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.ToolboxControl">
            <summary>
            When implemented by a class, gets or sets toolbox control associated with the designer.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.ReferencedAssemblies">
            <summary>
            When implemented by a class, gets collection of assemblies where the controls and components used on the form being designed are declared.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.ImportedNamespaces">
            <summary>
            When implemented by a class, in case of Visual Basic, gets collection of globally available namespaces.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.IFormDesignerControl.UserData">
            <summary>
            When implemented by a class, gets or sets user-specific data associated with this Form Designer
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerControl.GetLocalizationLanguage">
            <summary>
            When implemented by a class, gets current culture information
            </summary>
            <returns>Current culture info</returns>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerControl.SetLocalizationLanguage(System.Globalization.CultureInfo)">
            <summary>
            When implemented by a class, sets current culture information
            </summary>
            <param name="language">Culture information to set.</param>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerControl.Reload">
            <summary>
            When implemented by a class, reloads form to be designed from the source.
            </summary>
        </member>
        <member name="M:Alternet.FormDesigner.WinForms.IFormDesignerControl.Save">
            <summary>
            When implemented by a class, serializes designer to C# or Visual Basic file.
            </summary>
        </member>
        <member name="T:Alternet.FormDesigner.WinForms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsBottomHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsCenteredHorizontalHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsCenteredVerticalHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsLeftHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsRightHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.AlignObjectsTopHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.BringToFrontHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.CenterHorizontallyHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.CenterVerticallyHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.CollapseAll">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.CopyHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.CutHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.DeleteHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.DisplayStyle">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.EmptyResxTemplate">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;root&gt;
              &lt;xsd:schema id=&quot;root&quot; xmlns=&quot;&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;
                &lt;xsd:import namespace=&quot;http://www.w3.org/XML/1998/namespace&quot; /&gt;
                &lt;xsd:element name=&quot;root&quot; msdata:IsDataSet=&quot;true&quot;&gt;
                  &lt;xsd:complexType&gt;
                    &lt;xsd:choice maxOccurs=&quot;unbounded&quot;&gt;
                      &lt;xsd:element name=&quot;metadata&quot;&gt;
                        &lt;xsd:complexType&gt;
                          &lt;xsd:sequence&gt;
                            &lt;xsd:element name=&quot;va [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ExpandAll">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MakeHorizontalSpacingEqual">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MakeSameHeightHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MakeSameSizeHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MakeSameWidthHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MakeVerticalSpacingEqual">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MoveDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MoveInto">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MoveOut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.MoveUp">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.PasteHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Properties">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.PropertyGrid_ClearFilterButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.PropertyGrid_FilterIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.RemoveHorizontalSpacingHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.RemoveVerticalSpacingHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.Rename">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.SendToBackHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryCollapsed_VS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryCollapsed_VS_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryCollapsedSelected_VS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryCollapsedSelected_VS_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryExpanded_VS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryExpanded_VS_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryExpandedSelected_VS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxCategoryExpandedSelected_VS_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxSearchClearButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxSearchClearButton_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxSearchFocusButton">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ToolboxSearchFocusButton_HighDpi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Alternet.FormDesigner.WinForms.Properties.Resources.ViewCode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
